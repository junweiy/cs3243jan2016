import java.io.FileNotFoundException;
import java.io.IOException;

public class PlayerSkeleton {
	
	HeuristicParameters para = new HeuristicParameters();
	
	public PlayerSkeleton(HeuristicParameters hp) {
		this.para = hp;
	}
	
	//implement this function to have a working system
	public int pickMove(State s, int[][] legalMoves) {
		double maxScore = Integer.MIN_VALUE;
		int maxIndex = 0;
		for (int i = 0; i < legalMoves.length; i ++) {
			State nextState = getNextState(s, legalMoves[i]);
			double score = getScore(s, nextState, para);
			if (score > maxScore) {
				maxScore = score;
				maxIndex = i;
			}
		}
		return maxIndex;
	}
	
	/**
	 * Calculate the score/value of fitness function by a * aggregatedHeight + b * completedLine +
	 * c * numberOfHoles + d * bumpiness
	 * @param currentState The current state.
	 * @param nextState The next state for calculation of completedLine.
	 * @param para Heuristic parameters.
	 * @return The value of the fitness function.
	 */
	public double getScore(State currentState, State nextState, HeuristicParameters para) {
		int completedLine = nextState.getRowsCleared() - currentState.getRowsCleared();
		if (nextState.hasLost()) {
			return Double.NEGATIVE_INFINITY;
		}
		return para.a * getAggregateHeights(nextState) + para.b * completedLine 
				+ para.c * getNumberOfHoles(nextState) + para.d * getBumpiness(nextState);
	}
	
	public State getNextState(State s, int[] legalMove) {
		State sTemp = s.copy(); //copy(s);
		sTemp.makeMove(legalMove);
		return sTemp;
	}
	
	//This function returns the heights of all columns as an array
	public int[] getHeights(State nextState) {
		int[] heights = new int[State.COLS];
		for (int column = 0; column < State.COLS; column++) {
			int row = State.ROWS - 1;
			while (row >= 0 && nextState.getField()[row][column] == 0) {
				row--;
			}
			if (row != -1) {
				heights[column] = row + 1;
			} else {
				heights[column] = 0;
			}
		}
		return heights;
	}
		
	//This function gets the aggregate heights of each column
	public int getAggregateHeights(State nextState) {
		int[] heights = getHeights(nextState);
		int aggregateHeight = 0;
		for (int height : heights) {
			aggregateHeight += height;
		}
		return aggregateHeight;
	}
		
	//This function gets the bumpiness of each column
	public int getBumpiness(State nextState) {
		int[] heights = getHeights(nextState);
		int bumpiness = 0;
		for (int column = 0; column < State.COLS - 1; column++) {
			bumpiness += Math.abs(heights[column] - heights[column + 1]);
		}
		return bumpiness;
	}
		
	/**
	 * This function returns the number of complete lines in the field for a given piece configuration.
	 * A complete line is defined as a line where every single piece is filled in.
	 * 
	 * @param nextState: This is the nextState which will be tested against the number of complete lines.
	 * @return The number of complete lines.
	 */
	public int getNumberOfCompleteLines(State nextState) {
		int completeLines = 0;
		for (int row = 0; row < State.ROWS; row++) {
			for (int column = 0; column < State.COLS; column++) {
				if (nextState.getField()[row][column] == 0) {
					break;
				} else if (column == State.COLS - 1) {
					completeLines++;
				}
			}
		}
		return completeLines;
	}

	/**
	 * This function is responsible for calculating the number of holes that are currently in the field.
	 * A hole is defined as a space that does not have a Tetris piece currently in it but the space directly above it does.
	 * 
	 * @param nextState: The next state which will determine the number of holes on the board.
	 * @return
	 */
	public int getNumberOfHoles(State nextState) {
		int holes = 0;
		int[] heights = getHeights(nextState);
		for (int row = 0; row < State.ROWS; row++) {
			for (int column = 0; column < State.COLS; column++) {
				if (nextState.getField()[row][column] == 0 && row < heights[column]) {
					holes++;
				}
			}
		}
		return holes;
	}
	
	public static int run(HeuristicParameters hp) throws FileNotFoundException, IOException {
		State s = new State();
		new TFrame(s);
		PlayerSkeleton p = null;
		p = new PlayerSkeleton(hp);
		while(!s.hasLost()) {
			s.makeMove(p.pickMove(s,s.legalMoves()));
			s.draw();
			s.drawNext(0,0);
			try {
				Thread.sleep(1);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("You have completed "+s.getRowsCleared()+" rows.");
		return s.getRowsCleared();
	}

	
	public static void main(String[] args) throws FileNotFoundException, IOException {
		HeuristicParameters hp = HeuristicParameters.loadFirstHeuristicParameters();
		System.out.println("a, b, c, d: " + hp.a + " " + hp.b + " "+ hp.c + " "+ hp.d);
		run(hp);
	}
	
}
