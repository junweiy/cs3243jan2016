

/**
 * THIS CODE WAS ALL COMMENTED OUT IN VARIOUS CLASSES. I DELETED IT TO START CLEANING UP ALL OF OUR CODE.
 * @author admin
 *
 */
public class CommentedOutCode {
	
	
	
/*public void fillNonHoles(int[][] holes, int row, int column) {
	if (row >= ROWS || column >= COLS || row < 0 || column < 0 || field[row][column] != 0
			|| holes[row][column] != 0) {
		return;
	} 
	holes[row][column] = 1;
	fillNonHoles(holes, row + 1, column);
	fillNonHoles(holes, row - 1, column);
	fillNonHoles(holes, row, column + 1);
	fillNonHoles(holes, row, column - 1);
}

//This function calculates the number of holes in the field
public int getNumberOfHoles() {
	int holes = 0;
	
	int [][] filledArray = new int[ROWS][COLS];
	for (int i = 0; i < COLS; i++) {
		fillNonHoles(filledArray, ROWS - 1, i);
	}
	
	for (int row = 0; row < ROWS; row++) {
		for (int column = 0; column < COLS; column++) {
			if (filledArray[row][column] == 0 && field[row][column] == 0) {
				holes++;
			}
		}
	}
	return holes;
}*/
	
	// Get a deep copy of a state
	/*public State copy(State s) {
		State newState = new State();
		newState.lost = s.lost;
		newState.label = s.label;
		newState.turn = s.getTurnNumber();
		newState.cleared = s.getRowsCleared();
		for (int i = 0; i < State.ROWS;i++) {
			for (int j = 0; j < State.COLS; j++) {
				newState.getField()[i][j] = s.getField()[i][j];
			}
		}
		for (int i = 0; i < State.COLS; i++) {
			newState.top[i] = s.getTop()[i];
		}
		newState.nextPiece = s.nextPiece;
		return newState;
	}*/
}
